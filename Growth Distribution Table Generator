#This file produces tables that show the percentage of students in each domain, grade, and year that fall into a given growth quintile 

# > sessionInfo()
# R version 3.2.3 (2015-12-10)
# Platform: i386-w64-mingw32/i386 (32-bit)
# Running under: Windows 7 x64 (build 7601) Service Pack 1
# 
# locale:
#   [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252 LC_NUMERIC=C                          
# [5] LC_TIME=English_United States.1252    
# 
# attached base packages:
#   [1] stats     graphics  grDevices utils     datasets  methods   base     
# 
# other attached packages:
#   [1] tidyr_0.4.0 dplyr_0.4.3
# 
# loaded via a namespace (and not attached):
#   [1] lazyeval_0.1.10  magrittr_1.5     R6_2.1.2         assertthat_0.1   parallel_3.2.3   DBI_0.3.1        tools_3.2.3      Rcpp_0.12.3      data.table_1.9.6
# [10] chron_2.3-47 

rm(list = ls())

#define home directory
homedir <- "/Data/State DSRs/State DSR/MN Home Brewed Growth Tables/Growth Tables Files/Growth Tables/Distribution Tables"

setwd(homedir)

#Check if packages are install and then install any packages needed to run program
packages <- c("dplyr", "tidyr", "RODBC", "scales", "plyr", "sets")

for(package in packages){
  
  if(package %in% rownames(installed.packages()) == F){
    
    install.packages(package)
    
  }
  
}

#load packages
packages.load <- c("dplyr", "tidyr", "RODBC", "scales")
lapply(packages.load, library, character.only = T)

#Define list of starting grades
GRADES <- c("KG", "FIRST", "SECOND", "THIRD", "FOURTH", "FIFTH", "SIXTH", "SEVENTH", "EIGHTH", "HS")

#Define list of domains
DOMAINS = c("COMPOSITE", "LISTENING", "SPEAKING", "READING", "WRITING")

#Define list of years
YEARS = c("2016", "2015", "2014", "2013")


#connect to database
db <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=/Data/State DSRs/State DSR/MN Home Brewed Growth Tables/Growth Tables Files/GrowthTableDatabase.accdb")

#Create alphabetical key for proficiency levels
Proficiency.Key <- data.frame(Proficiency.Key = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"), 
                              LYProficiency = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6)) 


#create list of tables to use for growth calculation
growth_tables <- c("Student_Growth_2013", "Student_Growth_2014", "Student_Growth_2015", "Student_Growth_2016")


for(table.use in growth_tables){
  
  
  #define year
  YEAR <- substr(table.use, 16, 19)
  
  #Read in state growth data
  raw.data <- sqlQuery(db, paste("SELECT * FROM ", table.use, sep = ""), as.is = T)
  
  #Convert the growth band to a factor
  raw.data <- raw.data %>%
    mutate(GrowthBand = as.factor(GrowthBand), 
           GRADE = as.factor(sub("_.*", "", Range_Key)), 
           Proficiency.Key = sub("_([^_]*)$", "", Range_Key), 
           Proficiency.Key = regmatches(Proficiency.Key, regexpr(".$", Proficiency.Key))) %>%
    left_join(Proficiency.Key, by = "Proficiency.Key")
  
  
  
  raw.data$GRADE <- factor(raw.data$GRADE, levels = c("KG", "FIRST", "SECOND", "THIRD", 
                                                      "FOURTH", "FIFTH", "SIXTH", "SEVENTH", 
                                                      "EIGHTH", "HS"))
  
  growth.data <- raw.data %>%
    select(AnalysisID, DOMAIN, GrowthBand) %>%
    spread(DOMAIN, GrowthBand) %>%
    rename(COMPOSITE_GROWTH = COMPOSITE, 
           LISTENING_GROWTH = LISTENING, 
           READING_GROWTH = READING, 
           SPEAKING_GROWTH = SPEAKING, 
           WRITING_GROWTH = WRITING)
  
  proficiency.data <- raw.data %>%
    select(AnalysisID, DOMAIN, LYProficiency, GRADE) %>%
    spread(DOMAIN, LYProficiency) %>%
    rename(LY_COMPOSITE_LEVEL = COMPOSITE, 
           LY_LISTENING_LEVEL = LISTENING, 
           LY_READING_LEVEL = READING, 
           LY_WRITING_LEVEL = WRITING, 
           LY_SPEAKING_LEVEL = SPEAKING)
  
  student.data <- left_join(growth.data, proficiency.data, by = c("AnalysisID")) 
  
  #Define tuples for tables
  READING_LIST <- c("READING_GROWTH", "LY_READING_LEVEL", "GRADE", "AnalysisID")
  LISTENING_LIST <- c("LISTENING_GROWTH", "LY_LISTENING_LEVEL", "GRADE", "AnalysisID")
  SPEAKING_LIST <- c("SPEAKING_GROWTH", "LY_SPEAKING_LEVEL", "GRADE", "AnalysisID")
  WRITING_LIST <- c("WRITING_GROWTH", "LY_WRITING_LEVEL", "GRADE", "AnalysisID")
  COMPOSITE_LIST <- c("COMPOSITE_GROWTH", "LY_COMPOSITE_LEVEL", "GRADE", "AnalysisID")
  
  DOMAIN.LIST <- sets::set("READING_LIST" = READING_LIST, 
                            "LISTENING_LIST" = LISTENING_LIST, 
                            "SPEAKING_LIST" = SPEAKING_LIST, 
                            "WRITING_LIST" = WRITING_LIST, 
                            "COMPOSITE_LIST" = COMPOSITE_LIST)
  
  LIST.NAMES <- c("READING_LIST", "LISTENING_LIST", "SPEAKING_LIST", "WRITING_LIST", "COMPOSITE_LIST")
  
  for(NAME.USE in LIST.NAMES){
    
    #Get list of variables
    LIST.USE <- DOMAIN.LIST[[NAME.USE]]
    
    #subset student.data
    
    data.use <- student.data[,LIST.USE]
    
    #rename columns
    colnames(data.use)[1] <- "DOMAIN_GROWTH"
    colnames(data.use)[2] <- "DOMAIN_LEVEL"
    
    #all grades reading growth
    data.use <- data.use %>%
      filter(complete.cases(.)) %>%
      group_by(DOMAIN_GROWTH, DOMAIN_LEVEL) %>%
      summarise(student.count = length(AnalysisID))
    
    data.use <- data.use %>%
      group_by(DOMAIN_LEVEL, DOMAIN_GROWTH) %>%
      summarise(student.count = sum(student.count)) %>%
      mutate(PERCENT = paste(substr(percent(student.count/sum(student.count)), 1, 2), "%", sep = "")) %>%
      select(DOMAIN_LEVEL, DOMAIN_GROWTH, PERCENT) %>%
      group_by(DOMAIN_LEVEL)
    
    #return column names to indicate the proper domain name
    colnames(data.use)[1] <- LIST.USE[2]
    colnames(data.use)[2] <- LIST.USE[1]
    
    #extract domain name
    pos <- regexpr("_", NAME.USE)
    
    DOMAIN.NAME <- substr(NAME.USE, 1, pos-1)
    
    #define file name
    FILE.NAME <- paste(DOMAIN.NAME, "DISTRIBUTION", YEAR, sep = "_")

    #save file 
    write.table(data.use, paste(FILE.NAME, ".txt", sep = ""), sep = "\t", row.names = F)
        
  }
  
}
